service: shopping-backend
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    DYNAMO_TABLE_NAME: ItemsTable
    USER_POOL_ID:
      Ref: CognitoUserPool
    COGNITO_CLIENT_ID:
      Ref: CognitoUserPoolClient
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:signUp
        - cognito-idp:adminConfirmSignUp
      Resource:
        - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/ItemsTable
        - arn:aws:cognito-idp:${aws:region}:${aws:accountId}:userpool/us-east-1_u7LPzUGLq


functions:
  addItem:
    handler: src/add-item.addItem
    events:
      - httpApi:
          path: /
          method: post
  getItem:
    handler: src/get-item.getItem
    events:
      - httpApi:
          path: /item/{id}
          method: get
  getItems:
    handler: src/get-items.getItems
    events:
      - httpApi:
          path: /
          method: get
  updateItem:
    handler: src/update-item.updateItem
    events:
      - httpApi:
          path: /item/{id}
          method: patch
  deleteItem:
    handler: src/delete-item.deleteItem
    events:
      - httpApi:
          path: /item/{id}
          method: delete
  signup:
    handler: src/signup.signup
    events:
      - httpApi:
          path: /signup
          method: post
  login:
    handler: src/login.login
    events:
      - httpApi:
          path: /login
          method: post

resources:
  Resources:
    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMO_TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ShoppingBackendUserPool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ["email"]
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ShoppingBackendUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
